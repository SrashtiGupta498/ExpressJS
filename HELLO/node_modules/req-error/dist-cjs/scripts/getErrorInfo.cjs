"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.errorMessages = void 0;
exports.errorMessages = {
    statusCode: 400,
    notFound: ["Oops, looks like you're lost in space!", 404],
    exceptions: ['Something went very wrong!', 500],
    JSONParse: ['Invalid data recieved', 400],
    jwtExpire: ['Your token is no longer valid', 401],
    jwtInvalid: ['Login credentials are invalid', 401],
    mongoCast: ['Invalid input for `{$}`', 400],
    mongoObjParam: ['Invalid input for `{$}`', 400],
};
const getInfo = {
    duplicateError: (err) => {
        return `The given \`${Object.keys(err.keyValue)}\` already exists`;
    },
    validationError: (err) => {
        var _a;
        const messages = (_a = Object.values(err.errors)) === null || _a === void 0 ? void 0 : _a.map((er) => {
            if (er.name === 'CastError') {
                return exports.errorMessages.mongoCast[0].replace('{$}', er.path);
            }
            return er.message;
        });
        return messages.length > 1 ? messages : messages[0];
    },
    castError: (err) => {
        return exports.errorMessages.mongoCast[0].replace('{$}', err.path);
    },
    objParamError: (err) => {
        const msg = err.message.match(/(?<=got ).*$/gm)[0];
        return exports.errorMessages.mongoObjParam[0].replace('{$}', msg);
    },
};
exports.default = (err) => {
    if (err.isOperational)
        return [err.message, err.statusCode];
    if (err.type === 'entity.parse.failed') {
        return exports.errorMessages.JSONParse;
    }
    if (err.code === 11000) {
        return [getInfo.duplicateError(err), 400];
    }
    switch (err.name) {
        case 'JsonWebTokenError':
            return exports.errorMessages.jwtInvalid;
        case 'TokenExpiredError':
            return exports.errorMessages.jwtExpire;
        case 'ObjectParameterError':
            return [getInfo.objParamError(err), 400];
        case 'CastError':
            return [getInfo.castError(err), 400];
        case 'MulterError':
            return [err.message, 400];
        case 'ValidationError':
            return [getInfo.validationError(err), 400];
    }
    return exports.errorMessages.exceptions;
};
