"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const getErrorInfo_1 = __importStar(require("./scripts/getErrorInfo.cjs"));
const ReqError_1 = __importDefault(require("./ReqError.cjs"));
exports.default = (app, errorMsgs, formatJson) => {
    if (errorMsgs)
        Object.assign(getErrorInfo_1.errorMessages, errorMsgs);
    app.use((req, res, next) => {
        next(new ReqError_1.default(getErrorInfo_1.errorMessages.notFound));
    });
    app.use((err, req, res, next) => {
        const [message, statusCode = getErrorInfo_1.errorMessages.statusCode] = (0, getErrorInfo_1.default)(err);
        const resObj = { message };
        if (process.env.NODE_ENV === 'development') {
            Object.assign(resObj, { error: err, stack: err.stack });
        }
        if (res.headersSent) {
            return console.warn('Headers already sent!');
        }
        res.status(statusCode).json(formatJson
            ? formatJson(resObj, statusCode)
            : Object.assign({ status: statusCode < 500 ? 'fail' : 'error' }, resObj));
    });
};
