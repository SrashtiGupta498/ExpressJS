var __classPrivateFieldSet = (this && this.__classPrivateFieldSet) || function (receiver, state, value, kind, f) {
    if (kind === "m") throw new TypeError("Private method is not writable");
    if (kind === "a" && !f) throw new TypeError("Private accessor was defined without a setter");
    if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError("Cannot write private member to an object whose class did not declare it");
    return (kind === "a" ? f.call(receiver, value) : f ? f.value = value : state.set(receiver, value)), value;
};
var __classPrivateFieldGet = (this && this.__classPrivateFieldGet) || function (receiver, state, kind, f) {
    if (kind === "a" && !f) throw new TypeError("Private accessor was defined without a getter");
    if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError("Cannot read private member from an object whose class did not declare it");
    return kind === "m" ? f : kind === "a" ? f.call(receiver) : f ? f.value : state.get(receiver);
};
var _Check_instances, _Check_required, _Check_getOptions, _Check_createTypeChecker;
import checkItem from "./checkItem.mjs";
const DEFAULT_MESSAGES = {
    typeError: `Expected '{$key}' should be '{$type}'`,
    requiredError: `Value for '{$key}' is required'`,
};
class Check {
    constructor(required) {
        _Check_instances.add(this);
        _Check_required.set(this, void 0);
        this.string = __classPrivateFieldGet(this, _Check_instances, "m", _Check_createTypeChecker).call(this, String);
        this.number = __classPrivateFieldGet(this, _Check_instances, "m", _Check_createTypeChecker).call(this, Number);
        this.boolean = __classPrivateFieldGet(this, _Check_instances, "m", _Check_createTypeChecker).call(this, Boolean);
        this.array = __classPrivateFieldGet(this, _Check_instances, "m", _Check_createTypeChecker).call(this, Array);
        __classPrivateFieldSet(this, _Check_required, required, "f");
    }
}
_Check_required = new WeakMap(), _Check_instances = new WeakSet(), _Check_getOptions = function _Check_getOptions(type, config) {
    return Object.assign(Object.assign(Object.assign({}, DEFAULT_MESSAGES), config), { required: __classPrivateFieldGet(this, _Check_required, "f"), type });
}, _Check_createTypeChecker = function _Check_createTypeChecker(type) {
    return (object, options = {}) => {
        checkItem(object, __classPrivateFieldGet(this, _Check_instances, "m", _Check_getOptions).call(this, type, options));
    };
};
class RequiredCheck extends Check {
    get optional() {
        return new Check(false);
    }
    configure(errorMessages) {
        Object.assign(DEFAULT_MESSAGES, errorMessages);
    }
}
export default new RequiredCheck(true);
